/**
     * @author lixinjie
     * @since 2019-05-07
     */
    public class BioServer {

        static AtomicInteger counter = new AtomicInteger(0);
        static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

        public static void main(String[] args) {
            try {
                ServerSocket ss = new ServerSocket();
                ss.bind(new InetSocketAddress("localhost", 8080));
                while (true) {
                    Socket s = ss.accept();
                    processWithNewThread(s);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        static void processWithNewThread(Socket s) {
            Runnable run = () -> {
                InetSocketAddress rsa = (InetSocketAddress)s.getRemoteSocketAddress();
                System.out.println(time() + "->" + rsa.getHostName() + ":" + rsa.getPort() + "->" + Thread.currentThread().getId() + ":" + counter.incrementAndGet());
                try {
                    String result = readBytes(s.getInputStream());
                    System.out.println(time() + "->" + result + "->" + Thread.currentThread().getId() + ":" + counter.getAndDecrement());
                    s.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            };
            new Thread(run).start();
        }

        static String readBytes(InputStream is) throws Exception {
            long start = 0;
            int total = 0;
            int count = 0;
            byte[] bytes = new byte[1024];
            //开始读数据的时间
            long begin = System.currentTimeMillis();
            while ((count = is.read(bytes)) > -1) {
                if (start < 1) {
                    //第一次读到数据的时间
                    start = System.currentTimeMillis();
                }
                total += count;
            }
            //读完数据的时间
            long end = System.currentTimeMillis();
            return "wait=" + (start - begin) + "ms,read=" + (end - start) + "ms,total=" + total + "bs";
        }

        static String time() {
            return sdf.format(new Date());
        }
    }


    /**
     * @author lixinjie
     * @since 2019-05-07
     */
    public class Client {

        public static void main(String[] args) {
            try {
                for (int i = 0; i < 20; i++) {
                    Socket s = new Socket();
                    s.connect(new InetSocketAddress("localhost", 8080));
                    processWithNewThread(s, i);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        static void processWithNewThread(Socket s, int i) {
            Runnable run = () -> {
                try {
                    //睡眠随机的5-10秒，模拟数据尚未就绪
                    Thread.sleep((new Random().nextInt(6) + 5) * 1000);
                    //写1M数据，为了拉长服务器端读数据的过程
                    s.getOutputStream().write(prepareBytes());
                    //睡眠1秒，让服务器端把数据读完
                    Thread.sleep(1000);
                    s.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            };
            new Thread(run).start();
        }

        static byte[] prepareBytes() {
            byte[] bytes = new byte[1024*1024*1];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = 1;
            }
            return bytes;
        }
    }


/**
     * @author lixinjie
     * @since 2019-05-07
     */
    public class NioServer {

        static int clientCount = 0;
        static AtomicInteger counter = new AtomicInteger(0);
        static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

        public static void main(String[] args) {
            try {
                Selector selector = Selector.open();
                ServerSocketChannel ssc = ServerSocketChannel.open();
                ssc.configureBlocking(false);
                ssc.register(selector, SelectionKey.OP_ACCEPT);
                ssc.bind(new InetSocketAddress("localhost", 8080));
                while (true) {
                    selector.select();
                    Set<SelectionKey> keys = selector.selectedKeys();
                    Iterator<SelectionKey> iterator = keys.iterator();
                    while (iterator.hasNext()) {
                        SelectionKey key = iterator.next();
                        iterator.remove();
                        if (key.isAcceptable()) {
                            ServerSocketChannel ssc1 = (ServerSocketChannel)key.channel();
                            SocketChannel sc = null;
                            while ((sc = ssc1.accept()) != null) {
                                sc.configureBlocking(false);
                                sc.register(selector, SelectionKey.OP_READ);
                                InetSocketAddress rsa = (InetSocketAddress)sc.socket().getRemoteSocketAddress();
                                System.out.println(time() + "->" + rsa.getHostName() + ":" + rsa.getPort() + "->" + Thread.currentThread().getId() + ":" + (++clientCount));
                            }
                        } else if (key.isReadable()) {
                            //先将“读”从感兴趣操作移出，待把数据从通道中读完后，再把“读”添加到感兴趣操作中
                            //否则，该通道会一直被选出来
                            key.interestOps(key.interestOps() & (~ SelectionKey.OP_READ));
                            processWithNewThread((SocketChannel)key.channel(), key);
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        static void processWithNewThread(SocketChannel sc, SelectionKey key) {
            Runnable run = () -> {
                counter.incrementAndGet();
                try {
                    String result = readBytes(sc);
                    //把“读”加进去
                    key.interestOps(key.interestOps() | SelectionKey.OP_READ);
                    System.out.println(time() + "->" + result + "->" + Thread.currentThread().getId() + ":" + counter.get());
                    sc.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                counter.decrementAndGet();
            };
            new Thread(run).start();
        }

        static String readBytes(SocketChannel sc) throws Exception {
            long start = 0;
            int total = 0;
            int count = 0;
            ByteBuffer bb = ByteBuffer.allocate(1024);
            //开始读数据的时间
            long begin = System.currentTimeMillis();
            while ((count = sc.read(bb)) > -1) {
                if (start < 1) {
                    //第一次读到数据的时间
                    start = System.currentTimeMillis();
                }
                total += count;
                bb.clear();
            }
            //读完数据的时间
            long end = System.currentTimeMillis();
            return "wait=" + (start - begin) + "ms,read=" + (end - start) + "ms,total=" + total + "bs";
        }

        static String time() {
            return sdf.format(new Date());
        }
    }


/**
     * @author lixinjie
     * @since 2019-05-13
     */
    public class AioServer {

        static int clientCount = 0;
        static AtomicInteger counter = new AtomicInteger(0);
        static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

        public static void main(String[] args) {
            try {
                AsynchronousServerSocketChannel assc = AsynchronousServerSocketChannel.open();
                assc.bind(new InetSocketAddress("localhost", 8080));
                //非阻塞方法，其实就是注册了个回调，而且只能接受一个连接
                assc.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() {

                    @Override
                    public void completed(AsynchronousSocketChannel asc, Object attachment) {
                        //再次注册，接受下一个连接
                        assc.accept(null, this);
                        try {
                            InetSocketAddress rsa = (InetSocketAddress)asc.getRemoteAddress();
                            System.out.println(time() + "->" + rsa.getHostName() + ":" + rsa.getPort() + "->" + Thread.currentThread().getId() + ":" + (++clientCount));
                        } catch (Exception e) {
                        }
                        readFromChannelAsync(asc);
                    }

                    @Override
                    public void failed(Throwable exc, Object attachment) {

                    }
                });
                //不让主线程退出
                synchronized (AioServer.class) {
                    AioServer.class.wait();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        static void readFromChannelAsync(AsynchronousSocketChannel asc) {
            //会把数据读入到该buffer之后，再触发工作线程来执行回调
            ByteBuffer bb = ByteBuffer.allocate(1024*1024*1 + 1);
            long begin = System.currentTimeMillis();
            //非阻塞方法，其实就是注册了个回调，而且只能接受一次读取
            asc.read(bb, null, new CompletionHandler<Integer, Object>() {
                //从该连接上一共读到的字节数
                int total = 0;
                /**
                 * @param count 表示本次读取到的字节数，-1表示数据已读完
                 */
                @Override
                public void completed(Integer count, Object attachment) {
                    counter.incrementAndGet();
                    if (count > -1) {
                        total += count;
                    }
                    int size = bb.position();
                    System.out.println(time() + "->count=" + count + ",total=" + total + "bs,buffer=" + size + "bs->" + Thread.currentThread().getId() + ":" + counter.get());
                    if (count > -1) {//数据还没有读完
                        //再次注册回调，接受下一次读取
                        asc.read(bb, null, this);
                    } else {//数据已读完
                        try {
                            asc.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    counter.decrementAndGet();
                }

                @Override
                public void failed(Throwable exc, Object attachment) {

                }
            });
            long end = System.currentTimeMillis();
            System.out.println(time() + "->exe read req,use=" + (end -begin) + "ms" + "->" + Thread.currentThread().getId());
        }

        static String time() {
            return sdf.format(new Date());
        }
    }

